createdAt: "2018-03-28T03:40:18.608Z"
updatedAt: "2018-03-28T03:44:27.171Z"
type: "MARKDOWN_NOTE"
folder: "d4855edc37196573049e"
title: "Designing a Normalized State (redux docs)"
content: '''
  ## Designing a Normalized State (redux docs)
  
  [Normalizing State Shape - Redux](https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape#designing-a-normalized-state)
  
  The basic concepts of normalizing data are:
  
  - Each type of data gets its own "table" in the state.
  
  - Each "data table" should store the individual items in an object, with the IDs of the items as keys and the items themselves as the values.
  
  - Any references to individual items should be done by storing the item's ID.
  
  - Arrays of IDs should be used to indicate ordering.
  
  An example of a normalized state structure for the blog example above might look like:
  
  ```js
  {
      posts : {
          byId : {
              "post1" : {
                  id : "post1",
                  author : "user1",
                  body : "......",
                  comments : ["comment1", "comment2"]    
              },
              "post2" : {
                  id : "post2",
                  author : "user2",
                  body : "......",
                  comments : ["comment3", "comment4", "comment5"]    
              }
          },
          allIds : ["post1", "post2"]
      },
      comments : {
          byId : {
              "comment1" : {
                  id : "comment1",
                  author : "user2",
                  comment : ".....",
              },
              "comment2" : {
                  id : "comment2",
                  author : "user3",
                  comment : ".....",
              },
              "comment3" : {
                  id : "comment3",
                  author : "user3",
                  comment : ".....",
              },
              "comment4" : {
                  id : "comment4",
                  author : "user1",
                  comment : ".....",
              },
              "comment5" : {
                  id : "comment5",
                  author : "user3",
                  comment : ".....",
              },
          },
          allIds : ["comment1", "comment2", "comment3", "commment4", "comment5"]
      },
      users : {
          byId : {
              "user1" : {
                  username : "user1",
                  name : "User 1",
              }
              "user2" : {
                  username : "user2",
                  name : "User 2",
              }
              "user3" : {
                  username : "user3",
                  name : "User 3",
              }
          },
          allIds : ["user1", "user2", "user3"]
      }
  }
  ```
  
  ## Organizing Normalized Data in State
  
  A typical application will likely have a mixture of relational data and non-relational data.  While there is no single rule for exactly how those different types of data should be organized, one common pattern is to put the relational "tables" under a common parent key, such as "entities".  A state structure using this approach might look like:
  
  ```js
  {
      simpleDomainData1: {....},
      simpleDomainData2: {....}
      entities : {
          entityType1 : {....},
          entityType2 : {....}
      }
      ui : {
          uiSection1 : {....},
          uiSection2 : {....}
      }
  }
  ```
  
  ## Relationships and Tables
  
  Because we're treating a portion of our Redux store as a "database", many of the principles of database design also apply here as well.  For example, if we have a many-to-many relationship, we can model that using an intermediate table that stores the IDs of the corresponding items (often known as a "join table" or an "associative table").  For consistency, we would probably also want to use the same byId and allIds approach that we used for the actual item tables, like this:
  
  ```js
  {
      entities: {
          authors : { byId : {}, allIds : [] },
          books : { byId : {}, allIds : [] },
          authorBook : {
              byId : {
                  1 : {
                      id : 1,
                      authorId : 5,
                      bookId : 22
                  },
                  2 : {
                      id : 2,
                      authorId : 5,
                      bookId : 15,
                  }
                  3 : {
                      id : 3,
                      authorId : 42,
                      bookId : 12
                  }
              },
              allIds : [1, 2, 3]
  â€Š
          }
      }
  }
  ```
'''
tags: []
isStarred: false
isTrashed: false
